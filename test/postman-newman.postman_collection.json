{
	"info": {
		"_postman_id": "68dbbaee-bc0c-4e56-99f1-3105fa5287e4",
		"name": "postman-newman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Method: GET Route: /post",
			"item": [
				{
					"name": "Must view post itens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Must view post item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Post data created is valid\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.title).to.eql(\"repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem\");",
									"  pm.expect(responseJson.body).to.eql(\"error suscipit maxime adipisci consequuntur recusandae\\nvoluptas eligendi et est et voluptates\\nquia distinctio ab amet quaerat molestiae et vitae\\nadipisci impedit sequi nesciunt quis consectetur\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Method: POST Route: /post",
			"item": [
				{
					"name": "You must register post item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Post data created is valid\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.title).to.eql(\"Postman with Nowman example\");",
									"  pm.expect(responseJson.body).to.eql(\"Simple example how to use Postman with Nowman\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"title\": \"Postman with Nowman example\",\n    \"body\": \"Simple example how to use Postman with Nowman\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}